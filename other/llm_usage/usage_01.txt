fix the formatting of this code:
#### Preamble ####
# Purpose: Tests the structure and validity of the simulated Australian 
  #electoral divisions dataset.
# Author: Rohan Alexander
# Date: 26 September 2024
# Contact: rohan.alexander@utoronto.ca
# License: MIT
# Pre-requisites: 
  # - The tidyverse package must be installed and loaded
  # - 00-simulate_data.R must have been run
# Any other information needed? Make sure you are in the starter_folder rproj


#### Workspace setup ####
# Load Libraries
library(tidyverse)
library(testthat)
library(tibble)
library(dplyr)

# Load Data
simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")



#### Test cases ####
test_that("Test for number of states matches the predefined state list", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
)
expect_equal(length(unique(simulated_data$state)), length(states),
             info = "The number of unique states in the dataset does not match the predefined state list.")
})

test_that("Test for voter ID uniqueness", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
)
expect_equal(length(unique(simulated_data$voter_id)), nrow(simulated_data),
             info = "Voter IDs are not unique.")
})

test_that("Test for age values within valid range (18 to 100)", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
)
expect_true(all(simulated_data$age >= 18 & simulated_data$age <= 100),
            info = "Age values are outside the valid range of 18 to 100.")
})

test_that("Test for valid gender values", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
)
expect_true(all(simulated_data$gender %in% c("Male", "Female", "Other")),
            info = "Gender values contain invalid entries.")
})

test_that("Test for valid candidate preference values", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
)
expect_true(all(simulated_data$candidate_preference %in% candidates),
            info = "Candidate preference values contain invalid entries.")
})

test_that("Test for number of votes greater than zero for each state and candidate", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
  election_results <- simulated_data %>%
    group_by(state, candidate_preference) %>%
    summarise(votes = n(), .groups = 'drop')
)
election_results <- simulated_data %>%
  group_by(state, candidate_preference) %>%
  summarise(votes = n(), .groups = 'drop')
expect_true(all(election_results$votes > 0),
            info = "There are states or candidates with zero votes.")
})

test_that("Test for each state having votes for both candidates", {
  simulated_data <- read_csv("data/00-simulated_data/simulated_data.csv")
  election_results <- simulated_data %>%
    group_by(state, candidate_preference) %>%
    summarise(votes = n(), .groups = 'drop')
)

election_results <- simulated_data %>%
  group_by(state, candidate_preference) %>%
  summarise(votes = n(), .groups = 'drop')
states_with_both_candidates <- election_results %>%
  group_by(state) %>%
  summarise(candidate_count = n()) %>%
  filter(candidate_count == length(candidates))
expect_equal(nrow(states_with_both_candidates), length(states),
             info = "Not all states have votes for both candidates.")
})


ChatGPT said:
ChatGPT
Formatted R Tests
I've reformatted your R code to fix syntax issues and improve readability. Let me know if you need further edits or additional functionality added!





You said:
read the data inside each test cases, just like this code does:
test_that("Test for missing values", {
  data <- read_csv(here("data", "raw_data", "raw_data.csv"))
  missing_info <- sapply(data, function(x) sum(is.na(x)))
  missing_cols <- names(missing_info[missing_info > 0])
  expect_true(length(missing_cols) > 0, info = "Columns with missing values exist.")
  print(missing_cols)
})
ChatGPT said:
ChatGPT
Edited Formatted R Tests
I've updated each test case to read the data within its scope, following your provided example. Let me know if you need any further modifications!





You said:

Simulated Data

Unable to display visualization
edit test cases based on this data
ChatGPT said:
ChatGPT
Edited Formatted R Tests
I've updated the test cases to reflect the data in your CSV file. Let me know if there are any additional changes or if you'd like further assistance with these tests!





You said:
use here library to read the data
ChatGPT said:
ChatGPT
Made 2 edits to Formatted R Tests
I've updated the code to use the here library for reading the data files. Let me know if there's anything else you'd like to modify.





You said:
Simulated Data

Unable to display visualization
Line 28 Test for number of states matches the predefined state list
ChatGPT said:
ChatGPT
Formatted R Tests
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
#### Preamble ####
# Purpose: Tests the structure and validity of the simulated Australian
# electoral divisions dataset.
# Author: Rohan Alexander
# Date: 26 September 2024
# Contact: rohan.alexander@utoronto.ca
# License: MIT
# Pre-requisites:
#   - The `tidyverse` package must be installed and loaded
#   - 00-simulate_data.R must have been run
# Any other information needed? Make sure you are in the `starter_folder` rproj


#### Workspace setup ####
# Load Libraries
library(tidyverse)
library(testthat)
library(here)

#### Test cases ####
test_that("Test for number of states matches the predefined state list", {
  simulated_data <- read_csv(here("data", "00-simulated_data", "simulated_data.csv"))
  states <- c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming")
Edited Formatted R Tests
I've updated the predefined state list in your test case to match the unique states from the new dataset. Let me know if you need any further modifications.